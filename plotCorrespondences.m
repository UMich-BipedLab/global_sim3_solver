function plotCorrespondences(opts, axes_h, cur_axes, centroid, ...
    correspondences, H, s, title_txt)
    num_points = size(correspondences,2);
    color_list = getColors(3);
    if ~isfield(opts.plotting, 'plane_boundary')
        opts.plotting.plane_boundary = 10;
    end
    
    if ~isempty(centroid)
        scatter3(axes_h(cur_axes), ...
            centroid.x(1), centroid.x(2), centroid.x(3), 'fill', 'rd')
    end
    marker_size = 10;
    for i = 1:num_points
        if isa(correspondences(i).model, 'Plane')
            continue
        end
        % source measurements
        if opts.plotting.source_points
            plot3(axes_h(cur_axes), ...
                correspondences(i).point.x(1), ...
                correspondences(i).point.x(2), ...
                correspondences(i).point.x(3), ...
                'color', color_list{3}, ...
                'MarkerFaceColor', color_list{3}, ...
                'Marker', 'o', 'MarkerSize', marker_size);
        end
        
        % corrected measurements
        transformed = H * correspondences(i).point;
        
        if opts.plotting.corrected_source
            plot3(axes_h(cur_axes), ...
                transformed.x(1), ...
                transformed.x(2), ...
                transformed.x(3), ...
                'color', color_list{3}, ...
                'MarkerFaceColor', color_list{3},...
                'Marker', 'o', 'MarkerSize', marker_size);
        end
        
        if opts.plotting.model
            if isa(correspondences(i).model, 'Point')
                plot3(axes_h(cur_axes), ...
                    correspondences(i).model.x(1), ...
                    correspondences(i).model.x(2), ...
                    correspondences(i).model.x(3), ...
                    'color', color_list{1}, ...
                    'MarkerFaceColor', color_list{1}, ...
                    'Marker', '^', 'MarkerSize', marker_size);
            elseif isa(correspondences(i).model, 'Line')
                correspondences(i).model.plot(axes_h(cur_axes));
%                     plotALine(axes_h(cur_axes), direction, point, start_, end_)
            elseif isa(correspondences(i).model, 'Plane')
                plotAPlaneWithNormalNPoint(axes_h(cur_axes), ...
                    correspondences(i).model.n, ...
                    correspondences(i).model.x, ...
                    -opts.plotting.plane_boundary, ...
                    opts.plotting.plane_boundary, 0.5)
            else
              assert("Not a type from Plane, Line, Point")
            end
        end

        % distance from corrected source to target
        if opts.plotting.corrected2target
            if isa(correspondences(i).model, 'Point')
                plotArrow(axes_h(cur_axes), ...
                    correspondences(i).model.x, transformed.x)
            elseif isa(correspondences(i).model, 'Plane') || ...
               isa(correspondences(i).model, 'Line')
                plotArrow(axes_h(cur_axes), ...
                    correspondences(i).model.project(transformed).x, ...
                    transformed.x)
            else
              assert("Not a type from Plane, Line, Point")
            end
        end
        
        
        % distance from source to target
        if opts.plotting.source2target
            if isa(correspondences(i).model, 'Point')
                plotArrow(axes_h(cur_axes), ...
                    correspondences(i).model.x, correspondences(i).point.x)
            elseif isa(correspondences(i).model, 'Plane') || ...
               isa(correspondences(i).model, 'Line')
                plotArrow(axes_h(cur_axes), ...
                    correspondences(i).model.project(transformed).x, ...
                    correspondences(i).point.x)
            else
              assert("Not a type from Plane, Line, Point")
            end
        end
    end
    viewCurrentPlot(axes_h(cur_axes), title_txt, [145, 5], 0); 
end
